R version 4.0.0 (2020-04-24) -- "Arbor Day"
Copyright (C) 2020 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

Welcome to your Lab Sandbox! To get started, please reference the README.rd file on the right side of your screen.
> library(swirl)

| Hi! Type swirl() when you are ready to begin.

> 
> swirl::install_course()

| Course installed successfully!

> 
> Select “R_Programming.swc” when prompted
Error: unexpected input in "Select “"
> 
> swirl()

| Welcome to swirl! Please sign in. If you've been here before, use the same name
| as you did then. If you are new, call yourself something unique.

What shall I call you? Kriti

| Thanks, Kriti. Let's cover a couple of quick housekeeping items before we begin
| our first lesson. First of all, you should know that when you see '...', that
| means you should press Enter when you are done reading and ready to continue.

...  <-- That's your cue to press Enter to continue

| Also, when you see 'ANSWER:', the R prompt (>), or when you are asked to select
| from a list, that means it's your turn to enter a response, then press Enter to
| continue.

Select 1, 2, or 3 and press Enter 

1: Continue.
2: Proceed.
3: Let's get going!

Selection: 3

| You can exit swirl and return to the R prompt (>) at any time by pressing the
| Esc key. If you are already at the prompt, type bye() to exit and save your
| progress. When you exit properly, you'll see a short message letting you know
| you've done so.

| When you are at the R prompt (>):
| -- Typing skip() allows you to skip the current question.
| -- Typing play() lets you experiment with R on your own; swirl will ignore what
| you do...
| -- UNTIL you type nxt() which will regain swirl's attention.
| -- Typing bye() causes swirl to exit. Your progress will be saved.
| -- Typing main() returns you to swirl's main menu.
| -- Typing info() displays these options again.

| Let's get started!

...

| Please choose a course, or type 0 to exit swirl.

1: R Programming
2: Take me to the swirl course repository!

Selection: 1

| Please choose a lesson, or type 0 to return to course menu.

 1: Basic Building Blocks      2: Workspace and Files     
 3: Sequences of Numbers       4: Vectors                 
 5: Missing Values             6: Subsetting Vectors      
 7: Matrices and Data Frames   8: Logic                   
 9: Functions                 10: lapply and sapply       
11: vapply and tapply         12: Looking at Data         
13: Simulation                14: Dates and Times         
15: Base Graphics             

Selection: 5

  |                                                                         |   0%

| Missing values play an important role in statistics and data analysis. Often,
| missing values must not be ignored, but rather they should be carefully studied
| to see if there's an underlying pattern or cause for their missingness.

...

  |====                                                                     |   5%
| In R, NA is used to represent any value that is 'not available' or 'missing' (in
| the statistical sense). In this lesson, we'll explore missing values further.

...

  |=======                                                                  |  10%
| Any operation involving NA generally yields NA as the result. To illustrate,
| let's create a vector c(44, NA, 5, NA) and assign it to a variable x.

> x = c(44, NA, 5, NA)

| You almost had it, but not quite. Try again. Or, type info() for more options.

| Assign the vector c(44, NA, 5, NA) to a variable x. The NA must uppercase.

> x <- c(44, NA, 5, NA)

| Excellent job!

  |===========                                                              |  15%
| Now, let's multiply x by 3.

> x*3
[1] 132  NA  15  NA

| All that hard work is paying off!

  |===============                                                          |  20%
| Notice that the elements of the resulting vector that correspond with the NA
| values in x are also NA.

...

  |==================                                                       |  25%
| To make things a little more interesting, lets create a vector containing 1000
| draws from a standard normal distribution with y <- rnorm(1000).

> y <- rnorm(1000)

| That's the answer I was looking for.

  |======================                                                   |  30%
| Next, let's create a vector containing 1000 NAs with z <- rep(NA, 1000).

> z <- rep(NA, 1000)

| You are quite good my friend!

  |==========================                                               |  35%
| Finally, let's select 100 elements at random from these 2000 values (combining y
| and z) such that we don't know how many NAs we'll wind up with or what positions
| they'll occupy in our final vector -- my_data <- sample(c(y, z), 100).

> my_data <- sample(c(y, z), 100)

| You got it right!

  |=============================                                            |  40%
| Let's first ask the question of where our NAs are located in our data. The
| is.na() function tells us whether each element of a vector is NA. Call is.na()
| on my_data and assign the result to my_na.

> is.na(my_data)
  [1]  TRUE  TRUE  TRUE FALSE FALSE FALSE FALSE  TRUE FALSE FALSE  TRUE  TRUE  TRUE
 [14]  TRUE FALSE FALSE FALSE  TRUE FALSE  TRUE  TRUE  TRUE FALSE FALSE  TRUE FALSE
 [27] FALSE  TRUE  TRUE  TRUE  TRUE FALSE FALSE FALSE  TRUE FALSE  TRUE  TRUE FALSE
 [40] FALSE  TRUE  TRUE FALSE  TRUE FALSE  TRUE FALSE FALSE  TRUE  TRUE FALSE  TRUE
 [53] FALSE  TRUE  TRUE FALSE  TRUE  TRUE FALSE  TRUE FALSE  TRUE FALSE  TRUE  TRUE
 [66] FALSE  TRUE  TRUE FALSE FALSE  TRUE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE
 [79]  TRUE FALSE FALSE  TRUE  TRUE FALSE FALSE  TRUE  TRUE FALSE FALSE  TRUE FALSE
 [92]  TRUE  TRUE FALSE FALSE  TRUE FALSE  TRUE  TRUE FALSE

| That's not the answer I was looking for, but try again. Or, type info() for more
| options.

| Assign the result of is.na(my_data) to the variable my_na.

> is.na(my_na)
Error: object 'my_na' not found
> my<-is.na(my_data)

| You're close...I can feel it! Try it again. Or, type info() for more options.

| Assign the result of is.na(my_data) to the variable my_na.

> my_na<-is.na(my_data)

| Keep up the great work!

  |=================================                                        |  45%
| Now, print my_na to see what you came up with.

> my_na
  [1]  TRUE  TRUE  TRUE FALSE FALSE FALSE FALSE  TRUE FALSE FALSE  TRUE  TRUE  TRUE
 [14]  TRUE FALSE FALSE FALSE  TRUE FALSE  TRUE  TRUE  TRUE FALSE FALSE  TRUE FALSE
 [27] FALSE  TRUE  TRUE  TRUE  TRUE FALSE FALSE FALSE  TRUE FALSE  TRUE  TRUE FALSE
 [40] FALSE  TRUE  TRUE FALSE  TRUE FALSE  TRUE FALSE FALSE  TRUE  TRUE FALSE  TRUE
 [53] FALSE  TRUE  TRUE FALSE  TRUE  TRUE FALSE  TRUE FALSE  TRUE FALSE  TRUE  TRUE
 [66] FALSE  TRUE  TRUE FALSE FALSE  TRUE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE
 [79]  TRUE FALSE FALSE  TRUE  TRUE FALSE FALSE  TRUE  TRUE FALSE FALSE  TRUE FALSE
 [92]  TRUE  TRUE FALSE FALSE  TRUE FALSE  TRUE  TRUE FALSE

| You got it right!

  |====================================                                     |  50%
| Everywhere you see a TRUE, you know the corresponding element of my_data is NA.
| Likewise, everywhere you see a FALSE, you know the corresponding element of
| my_data is one of our random draws from the standard normal distribution.

...

  |========================================                                 |  55%
| In our previous discussion of logical operators, we introduced the `==` operator
| as a method of testing for equality between two objects. So, you might think the
| expression my_data == NA yields the same results as is.na(). Give it a try.

> my_data == NA
  [1] NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA
 [27] NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA
 [53] NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA
 [79] NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA

| Perseverance, that's the answer.

  |============================================                             |  60%
| The reason you got a vector of all NAs is that NA is not really a value, but
| just a placeholder for a quantity that is not available. Therefore the logical
| expression is incomplete and R has no choice but to return a vector of the same
| length as my_data that contains all NAs.

...

  |===============================================                          |  65%
| Don't worry if that's a little confusing. The key takeaway is to be cautious
| when using logical expressions anytime NAs might creep in, since a single NA
| value can derail the entire thing.

...

  |===================================================                      |  70%
| So, back to the task at hand. Now that we have a vector, my_na, that has a TRUE
| for every NA and FALSE for every numeric value, we can compute the total number
| of NAs in our data.

...

  |=======================================================                  |  75%
| The trick is to recognize that underneath the surface, R represents TRUE as the
| number 1 and FALSE as the number 0. Therefore, if we take the sum of a bunch of
| TRUEs and FALSEs, we get the total number of TRUEs.

...

  |==========================================================               |  80%
| Let's give that a try here. Call the sum() function on my_na to count the total
| number of TRUEs in my_na, and thus the total number of NAs in my_data. Don't
| assign the result to a new variable.

> 
> sum(my_na)
[1] 55

| All that practice is paying off!

  |==============================================================           |  85%
| Pretty cool, huh? Finally, let's take a look at the data to convince ourselves
| that everything 'adds up'. Print my_data to the console.

> my_data
  [1]          NA          NA          NA  1.12958782  1.13755754 -0.64217228
  [7]  0.58625353          NA  0.03377879  0.46699236          NA          NA
 [13]          NA          NA  0.04494371 -2.14502848 -0.13804021          NA
 [19]  0.17677180          NA          NA          NA  1.12607171  0.59436190
 [25]          NA  0.84970365 -0.97438607          NA          NA          NA
 [31]          NA -0.54369824 -0.26092691 -0.22157878          NA  0.50433505
 [37]          NA          NA -0.09563311 -1.00879616          NA          NA
 [43] -0.39820045          NA -1.37190648          NA  0.05315204  1.04081064
 [49]          NA          NA  0.05095339          NA -0.78021517          NA
 [55]          NA -0.43577923          NA          NA  0.45115623          NA
 [61] -0.55417439          NA  0.98253834          NA          NA -1.47374857
 [67]          NA          NA  0.50952658  1.04752601          NA -0.67031425
 [73]          NA          NA          NA          NA          NA          NA
 [79]          NA  0.17221783 -0.72945195          NA          NA  0.63242798
 [85]  1.33906884          NA          NA  0.80683817  0.36184776          NA
 [91]  0.61263462          NA          NA  0.22745152  1.32139072          NA
 [97]  0.75800457          NA          NA -1.10908058

| You got it!

  |==================================================================       |  90%
| Now that we've got NAs down pat, let's look at a second type of missing value --
| NaN, which stands for 'not a number'. To generate NaN, try dividing (using a
| forward slash) 0 by 0 now.

> 0/0
[1] NaN

| Nice work!

  |=====================================================================    |  95%
| Let's do one more, just for fun. In R, Inf stands for infinity. What happens if
| you subtract Inf from Inf?

> Inf-Inf
[1] NaN

| Excellent work!

  |=========================================================================| 100%
